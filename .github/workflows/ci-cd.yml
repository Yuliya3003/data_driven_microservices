name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          cd eureka-server && mvn clean package -DskipTests
          cd ../user-service && mvn clean package -DskipTests
          cd ../task-service && mvn clean package -DskipTests
          cd ../api_gateway && mvn clean package -DskipTests

      - name: Run tests
        run: |
          cd eureka-server && mvn test
          cd ../user-service && mvn test
          cd ../task-service && mvn test
          cd ../api_gateway && mvn test

  deploy-and-monitor:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          sudo chmod +x /usr/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create prometheus.yml
        run: |
          cat <<EOF > prometheus.yml
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'api-gateway'
              metrics_path: '/actuator/prometheus'
              static_configs:
                - targets: ['api-gateway:8080']
            - job_name: 'user-service'
              metrics_path: '/actuator/prometheus'
              static_configs:
                - targets: ['user-service:8081']
            - job_name: 'task-service'
              metrics_path: '/actuator/prometheus'
              static_configs:
                - targets: ['task-service:8082']
          EOF
          ls -la prometheus.yml
          cat prometheus.yml

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push

      - name: Create Docker network
        run: |
          docker network create microservices-net || true

      - name: Start microservices
        run: docker-compose up -d

      - name: Start Prometheus
        run: |
          docker run -d \
            --name prometheus \
            -p 9090:9090 \
            -v ${GITHUB_WORKSPACE}/prometheus.yml:/etc/prometheus/prometheus.yml \
            --network microservices-net \
            prom/prometheus:latest

      - name: Wait for services and check availability
        run: |
          sleep 60  
         
          until curl -f http://localhost:8761 || [ $? -eq 7 ]; do
            echo "Waiting for Eureka to be ready..."
            sleep 5
          done
          
          until curl -f http://localhost:8080/actuator/health || [ $? -eq 7 ]; do
            echo "Waiting for api-gateway to be ready..."
            sleep 5
          done
          echo "Services are ready"

      - name: Check service metrics
        run: |
          docker-compose exec -T api-gateway curl http://localhost:8080/actuator/prometheus || echo "API Gateway metrics unavailable"
          docker-compose exec -T user-service curl http://localhost:8081/actuator/prometheus || echo "User Service metrics unavailable"
          docker-compose exec -T task-service curl http://localhost:8082/actuator/prometheus || echo "Task Service metrics unavailable"

      - name: Check Prometheus status
        run: |
          curl http://localhost:9090/api/v1/status/config || echo "Failed to get Prometheus config"
          curl http://localhost:9090/api/v1/targets || echo "Failed to get Prometheus targets"

      - name: Deploy to server
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER << 'EOF'
            mkdir -p ~/taskmanager
            cd ~/taskmanager
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF

  load-test:
    runs-on: ubuntu-latest
    needs: deploy-and-monitor
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run k6 load test
        run: |
          docker run --rm \
            -v ${GITHUB_WORKSPACE}:/scripts \
            --network microservices-net \
            grafana/k6:latest run /scripts/load-test.js

      - name: Wait for Prometheus to collect metrics
        run: sleep 60

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: pip install requests

      - name: Generate metrics HTML
        run: |
          curl http://localhost:9090/api/v1/query?query=http_server_requests_seconds_sum || echo "Failed to query Prometheus"
          python generate_metrics_page.py
          ls -la public
          cat public/index.html

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0.0
        with:
          publish-dir: './public'
          production-branch: main
          deploy-message: '${{ github.event.head_commit.message }} (post-load test)'
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}














